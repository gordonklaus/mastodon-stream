// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mastodon.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto "github.com/gordonklaus/mastodon-stream/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MastodonName is the fully-qualified name of the Mastodon service.
	MastodonName = "mastodon.Mastodon"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MastodonStreamTimelineProcedure is the fully-qualified name of the Mastodon's StreamTimeline RPC.
	MastodonStreamTimelineProcedure = "/mastodon.Mastodon/StreamTimeline"
)

// MastodonClient is a client for the mastodon.Mastodon service.
type MastodonClient interface {
	StreamTimeline(context.Context, *connect_go.Request[proto.StreamTimelineRequest]) (*connect_go.ServerStreamForClient[proto.StreamTimelineResponse], error)
}

// NewMastodonClient constructs a client for the mastodon.Mastodon service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMastodonClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MastodonClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mastodonClient{
		streamTimeline: connect_go.NewClient[proto.StreamTimelineRequest, proto.StreamTimelineResponse](
			httpClient,
			baseURL+MastodonStreamTimelineProcedure,
			opts...,
		),
	}
}

// mastodonClient implements MastodonClient.
type mastodonClient struct {
	streamTimeline *connect_go.Client[proto.StreamTimelineRequest, proto.StreamTimelineResponse]
}

// StreamTimeline calls mastodon.Mastodon.StreamTimeline.
func (c *mastodonClient) StreamTimeline(ctx context.Context, req *connect_go.Request[proto.StreamTimelineRequest]) (*connect_go.ServerStreamForClient[proto.StreamTimelineResponse], error) {
	return c.streamTimeline.CallServerStream(ctx, req)
}

// MastodonHandler is an implementation of the mastodon.Mastodon service.
type MastodonHandler interface {
	StreamTimeline(context.Context, *connect_go.Request[proto.StreamTimelineRequest], *connect_go.ServerStream[proto.StreamTimelineResponse]) error
}

// NewMastodonHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMastodonHandler(svc MastodonHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(MastodonStreamTimelineProcedure, connect_go.NewServerStreamHandler(
		MastodonStreamTimelineProcedure,
		svc.StreamTimeline,
		opts...,
	))
	return "/mastodon.Mastodon/", mux
}

// UnimplementedMastodonHandler returns CodeUnimplemented from all methods.
type UnimplementedMastodonHandler struct{}

func (UnimplementedMastodonHandler) StreamTimeline(context.Context, *connect_go.Request[proto.StreamTimelineRequest], *connect_go.ServerStream[proto.StreamTimelineResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mastodon.Mastodon.StreamTimeline is not implemented"))
}
